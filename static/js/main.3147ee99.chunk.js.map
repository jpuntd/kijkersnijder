{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onCropComplete","crop","console","log","makeClientCrop","onCropChange","setState","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","src","result","readAsDataURL","onImageLoaded","image","imageRef","height","width","state","x","y","aspect","croppedImageUrl","bind","assertThisInitialized","getCroppedImg","_this2","then","fileName","_this3","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","Promise","resolve","toBlob","blob","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","react_default","a","className","id","crossOrigin","alt","type","onChange","href","download","ReactCrop_default","onComplete","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3147ee99.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      src: null,\n      crop: {\n        x: 10,\n        y: 10,\n        aspect: 360 / 187,\n      },\n      croppedImageUrl: ''\n    };\n\n    this.onCropComplete = this.onCropComplete.bind(this);\n    this.onCropChange = this.onCropChange.bind(this);\n    this.makeClientCrop = this.makeClientCrop.bind(this);\n    this.getCroppedImg = this.getCroppedImg.bind(this);\n\n  }\n\n  makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      this.getCroppedImg(\n        this.imageRef,\n        crop,\n        'newFile.jpeg',\n      ).then(croppedImageUrl => this.setState({ croppedImageUrl }));\n    }\n  }\n\n\n  onCropComplete = (crop) => {\n    console.log('onCropComplete', crop);\n    this.makeClientCrop(crop);\n  }\n\n  onCropChange = (crop) => {\n    // console.log('onCropChange', crop);\n    this.setState({ crop });\n  }\n\n  onSelectFile = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => {\n        this.setState({ src: reader.result });\n      });\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  }\n\n  onImageLoaded = (image) => {\n    this.imageRef = image;\n    console.log(image.height + '/' + image.width)\n    this.makeClientCrop(this.state.crop);\n    this.setState({ crop: { x: 80, y: 80, width: 80 } })\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height,\n    );\n\n    return new Promise((resolve) => {\n      canvas.toBlob((blob) => {\n        blob.name = fileName; // eslint-disable-line no-param-reassign\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg');\n    });\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"cropped-image\">\n          {this.state.croppedImageUrl?\n            <img crossOrigin=\"Anonymous\" src={this.state.croppedImageUrl} alt=\"cropped\" />:\n            <input type=\"file\" onChange={this.onSelectFile} />}\n          {this.state.croppedImageUrl && <a href={this.state.croppedImageUrl} download><button>Download</button></a>}\n        </div>\n        <ReactCrop className=\"crop-editor\" src={this.state.src}\n          crop={this.state.crop}\n          onImageLoaded={this.onImageLoaded}\n          onComplete={this.onCropComplete}\n          onChange={this.onCropChange}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}